name: Create Release

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
      release_notes:
        description: 'Release notes (optional)'
        required: false
        type: string

jobs:
  create-release:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
      - name: Install dependencies
        run: npm ci
        
      - name: Bump version
        run: npm version ${{ github.event.inputs.version_type }} --no-git-tag-version
        
      - name: Get new version
        id: version
        run: echo "new_version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT
        
      - name: Update manifest version
        run: |
          node -e "
            const fs = require('fs');
            const manifest = JSON.parse(fs.readFileSync('manifest.json', 'utf8'));
            manifest.version = '${{ steps.version.outputs.new_version }}';
            fs.writeFileSync('manifest.json', JSON.stringify(manifest, null, 2) + '\n');
          "
          
      - name: Build and package extension
        run: |
          npm run build
          npm run package
          
      - name: Commit version bump
        run: |
          git add package.json package-lock.json manifest.json
          git commit -m "chore: bump version to v${{ steps.version.outputs.new_version }}"
          
      - name: Create and push tag
        run: |
          git tag -a "v${{ steps.version.outputs.new_version }}" -m "Release v${{ steps.version.outputs.new_version }}"
          git push origin HEAD --tags
          
      - name: Find extension file
        id: extension_file
        run: |
          EXTENSION_FILE=$(find web-ext-artifacts -name "*.zip" | head -1)
          echo "path=$EXTENSION_FILE" >> $GITHUB_OUTPUT
          echo "filename=$(basename $EXTENSION_FILE)" >> $GITHUB_OUTPUT
          
      - name: Generate changelog
        id: changelog
        run: |
          if [ -n "${{ github.event.inputs.release_notes }}" ]; then
            echo "custom_notes=${{ github.event.inputs.release_notes }}" >> $GITHUB_OUTPUT
          fi
          
          # Get commits since last tag
          LAST_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
          if [ -n "$LAST_TAG" ]; then
            echo "commits<<EOF" >> $GITHUB_OUTPUT
            git log --pretty=format:"- %s (%h)" $LAST_TAG..HEAD >> $GITHUB_OUTPUT
            echo "" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "commits=- Initial release" >> $GITHUB_OUTPUT
          fi
          
      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.version.outputs.new_version }}
          release_name: Release v${{ steps.version.outputs.new_version }}
          body: |
            ## Polimi Exam Calendar Extension v${{ steps.version.outputs.new_version }}
            
            ${{ steps.changelog.outputs.custom_notes }}
            
            ### Changes
            ${{ steps.changelog.outputs.commits }}
            
            ### Installation Instructions
            
            **For Chrome/Edge:**
            1. Download the extension ZIP file below
            2. Extract the ZIP file to a folder
            3. Open Chrome/Edge and go to `chrome://extensions/` or `edge://extensions/`
            4. Enable "Developer mode" (toggle in top right)
            5. Click "Load unpacked" and select the extracted folder
            
            **For Firefox:**
            1. Download the extension ZIP file below
            2. Open Firefox and go to `about:debugging`
            3. Click "This Firefox"
            4. Click "Load Temporary Add-on"
            5. Select the ZIP file directly (no need to extract)
            
            ### What's New
            - Extension has been built and tested automatically
            - All dependencies are up to date
            - Compatible with latest browser versions
            
            ---
            
            **Download the extension below ⬇️**
          draft: false
          prerelease: false
          
      - name: Upload Extension to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ steps.extension_file.outputs.path }}
          asset_name: polimi-exam-calendar-v${{ steps.version.outputs.new_version }}.zip
          asset_content_type: application/zip
